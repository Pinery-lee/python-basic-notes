# 给定一个爬楼梯的阶数n, 每次能爬1或者2阶，找到方案数量，使用暴力搜索
# 暴力搜索也不是标准的递归，而是将问题从顶到底的进行拆解，不断分解为子问题
# dp[i] = dp[i-1] + dp[i-2]
# 同样也是构建整个递归树，同标准递归一样，时间复杂度也是O(2^n)

def dfs(i):
    """和标准递归一样，也是属深度优先搜索"""
    # base case 上一阶台阶方案数为1，上两阶台阶方案数为2
    if i == 1 or i == 2:
        return i
    return dfs(i-1) + dfs(i-2)

if __name__ == '__main__':
    n = 15
    print(dfs(n))
